
const STAT_CONFIG={pts:{name:"PTS",dataKey:"pts",zKey:"z_pts"},reb:{name:"REB",dataKey:"reb",zKey:"z_reb"},ast:{name:"AST",dataKey:"ast",zKey:"z_ast"},stl:{name:"STL",dataKey:"stl",zKey:"z_stl"},blk:{name:"BLK",dataKey:"blk",zKey:"z_blk"},three_pm:{name:"3PM",dataKey:"three_pm",zKey:"z_three_pm"},tov:{name:"TO (Neg)",dataKey:"tov",zKey:"z_tov",invertColor:!0},fg_impact:{name:"FG% Impact",dataKey:"fg_pct",zKey:"z_fg_impact"},ft_impact:{name:"FT% Impact",dataKey:"ft_pct",zKey:"z_ft_impact"}},WEIGHT_OPTIONS=[{text:"Punt (x0)",value:0},{text:"x0.25",value:.25},{text:"x0.5",value:.5},{text:"x0.75",value:.75},{text:"Standard (x1)",value:1},{text:"x1.25",value:1.25},{text:"x1.5",value:1.5},{text:"x2.0",value:2}];let fullData={},processedData=[],currentSort={column:"weighted_z_score",direction:"desc"};const elements={lastUpdated:document.getElementById("last-updated"),showCount:document.getElementById("show-count"),searchPlayer:document.getElementById("search-player"),seasonControls:document.getElementById("season-controls"),categoryGrid:document.getElementById("category-weights-grid"),table:document.getElementById("predictions-table"),tableHead:document.getElementById("predictions-thead"),tableBody:document.getElementById("predictions-tbody"),loadingMessage:document.getElementById("loading-message"),dailyGamesContainer:document.getElementById("daily-games-container")};function openTab(e,t){document.querySelectorAll(".tab-content").forEach(e=>e.style.display="none"),document.querySelectorAll(".tab-link").forEach(e=>e.classList.remove("active")),document.getElementById(t).style.display="block",e.currentTarget.classList.add("active"),"Season"===t?document.getElementById(t).classList.add("active"):document.getElementById("Season").classList.remove("active")}function initializeSeasonTab(){if(!fullData.seasonLongProjections||0===fullData.seasonLongProjections.length)return elements.loadingMessage.textContent="No season-long projections are available in predictions.json.",void(elements.seasonControls.style.display="none");elements.seasonControls.style.display="block",setupSeasonControls(),addSeasonEventListeners(),recalculateAndRender(),elements.loadingMessage.style.display="none",elements.table.style.display="table"}function setupSeasonControls(){const e=fullData.seasonLongProjections[0];elements.categoryGrid.innerHTML=Object.entries(STAT_CONFIG).map(([t,n])=>void 0!==e[n.zKey]?`<div class=category-item id=cat-item-${t}><label for=cb-${t}><input type=checkbox id=cb-${t} data-key=${t} checked> ${n.name}</label><select id=sel-${t} data-key=${t}>${WEIGHT_OPTIONS.map(e=>`<option value=${e.value} ${1===e.value?"selected":""}>${e.text}</option>`).join("")}</select></div>`:"").join("")}function addSeasonEventListeners(){elements.categoryGrid.addEventListener("change",recalculateAndRender),elements.showCount.addEventListener("change",recalculateAndRender),elements.searchPlayer.addEventListener("input",recalculateAndRender),elements.tableHead.addEventListener("click",handleSort)}function recalculateAndRender(){const e=getControlSettings();processedData=fullData.seasonLongProjections.map(e=>{let t=0,n=0;const o=getControlSettings().weights;for(const a in STAT_CONFIG)o[a]>0&&void 0!==e[STAT_CONFIG[a].zKey]&&(t+=e[STAT_CONFIG[a].zKey]*o[a],n++);const a=n>0?t/n*3:0;return{...e,weighted_z_score:a}}),e.searchTerm&&(processedData=processedData.filter(t=>t.playerName.toLowerCase().includes(e.searchTerm))),sortData(processedData),renderTable(e.activeColumns)}function getControlSettings(){const e={},t=new Set;return document.querySelectorAll(".category-item input[type=checkbox]").forEach(n=>{const o=n.dataset.key,a=document.getElementById(`sel-${o}`);e[o]=n.checked?parseFloat(a.value):0,n.checked&&t.add(o)}),{weights:e,activeColumns:t,showCount:parseInt(elements.showCount.value,10),searchTerm:elements.searchPlayer.value.toLowerCase().trim()}}function renderTable(e){renderTableHeader(e),renderTableBody(e)}function renderTableHeader(e){const t=[{key:"rank",name:"R#"},{key:"playerName",name:"PLAYER"},{key:"pos",name:"POS"},{key:"team",name:"TEAM"},{key:"gp",name:"GP"},{key:"mpg",name:"MPG"}],n=Object.entries(STAT_CONFIG).filter(([t])=>e.has(t)).map(([e,t])=>({key:t.dataKey,name:t.name.replace(" (Neg)","").replace(" Impact","")})),o={key:"weighted_z_score",name:"TOTAL"},a=[...t,...n,o];elements.tableHead.innerHTML=`<tr>${a.map(e=>`<th data-sort-key=${e.key}>${e.name}<span class=sort-indicator></span></th>`).join("")}</tr>`,updateSortIndicators()}function renderTableBody(e){const t=processedData.slice(0,parseInt(elements.showCount.value,10));elements.tableBody.innerHTML=0===t.length?'<tr><td colspan=20>No players match your criteria.</td></tr>':t.map(t=>{let n="<tr>";n+=`<td>${t.original_rank}</td>`,n+=`<td><b>${t.playerName}</b></td>`,n+=`<td>${t.pos||"N/A"}</td>`,n+=`<td>${t.team||"N/A"}</td>`,n+=`<td>${t.gp||0}</td>`,n+=`<td>${t.mpg||0}</td>`;for(const[o,a]of Object.entries(STAT_CONFIG))if(e.has(o)){const e=t[a.zKey]||0;let o=t[a.dataKey];a.dataKey.endsWith("_pct")&&(o=(100*o).toFixed(1)+"%"),n+=`<td class="cell-value color-cell ${getZScoreClass(e,a.invertColor)}">${o||0}</td>`}return n+=`<td><b>${t.weighted_z_score.toFixed(2)}</b></td>`,n+="</tr>"}).join("")}function handleSort(e){const t=e.target.closest("th")?.dataset.sortKey;t&&(currentSort.column===t?currentSort.direction="desc"===currentSort.direction?"asc":"desc":(currentSort.column=t,currentSort.direction="playerName"===t||"pos"===t||"team"===t?"asc":"desc"),recalculateAndRender())}function sortData(e){const{column:t,direction:n}=currentSort,o="asc"===n?1:-1;e.forEach((e,t)=>e.original_rank=t+1),e.sort((e,a)=>{if("rank"===t)return(e.original_rank-a.original_rank)*o;let s=e[t],l=a[t];return"string"==typeof s?s.localeCompare(l)*o:s<l?-1*o:s>l?1*o:0})}function getZScoreClass(e,t=!1){if(null==e)return"average";const n=t?-e:e;return n>=1.75?"elite":n>=1.25?"very-good":n>=.75?"good":n<=-1.25?"not-good":n<=-.75?"below-average":"average"}function updateSortIndicators(){elements.tableHead.querySelectorAll("th").forEach(e=>{const t=e.querySelector(".sort-indicator");t&&(t.textContent=e.dataset.sortKey===currentSort.column?"asc"===currentSort.direction?"▲":"▼":"")})}function renderDailyGamesTab(){const e=elements.dailyGamesContainer;if(e.innerHTML="",!fullData.dailyGames||0===fullData.dailyGames.length)return void(e.innerHTML='<div class=card><p>No daily game predictions available.</p></div>');fullData.dailyGames.forEach(t=>{const n=document.createElement("div");n.className="game-card";const o=t.predictions.map(e=>`<div class=team-prediction-container><h3>${e.teamName}</h3><div class=table-container><table class=daily-table><thead><tr><th>Player</th><th>MIN</th><th>PTS</th><th>REB</th><th>AST</th><th>STL</th><th>BLK</th></tr></thead><tbody>${e.players.map(e=>`<tr><td>${e.Player_Name}</td><td>${e.Predicted_Minutes}</td><td>${e.points_lower}-${e.points_upper}</td><td>${e.reboundsTotal_lower}-${e.reboundsTotal_upper}</td><td>${e.assists_lower}-${e.assists_upper}</td><td>${e.steals_lower}-${e.steals_upper}</td><td>${e.blocks_lower}-${e.blocks_upper}</td></tr>`).join("")}</tbody></table></div></div>`).join("");n.innerHTML=`<div class=game-card-header><span>${t.teams}</span> <span class=projected-total>Total: ${t.projectedTotal}</span></div>
            ${o}`,e.appendChild(n)})}document.addEventListener("DOMContentLoaded",async()=>{try{const e=await fetch("predictions.json");if(!e.ok)throw new Error(`HTTP error! status: ${e.status}`);fullData=await e.json(),elements.lastUpdated.textContent=new Date(fullData.lastUpdated).toLocaleString(),initializeSeasonTab(),renderDailyGamesTab()}catch(e){console.error("Failed to initialize:",e),elements.loadingMessage.textContent="Error loading data. Please check predictions.json and the console.",elements.dailyGamesContainer.innerHTML='<p class="card">Error loading daily games data.</p>'}}),document.getElementById("Season").style.display="block";

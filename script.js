
    let fullData = {}; let processedSeasonData = [];
    let currentSort = { column: "custom_z_score", direction: "desc" };
    let accuracyChartInstance = null; let statErrorChartInstance = null;

    const STAT_CONFIG={points:{name:"PTS",zKey:"z_points"},reboundsTotal:{name:"REB",zKey:"z_reboundsTotal"},assists:{name:"AST",zKey:"z_assists"},steals:{name:"STL",zKey:"z_steals"},blocks:{name:"BLK",zKey:"z_blocks"},threePointersMade:{name:"3PM",zKey:"z_threePointersMade"},turnovers:{name:"TO",zKey:"z_turnovers",invert:true},FG_impact:{name:"FG% Impact",dataKey:"FG%",zKey:"z_FG_impact"},FT_impact:{name:"FT% Impact",dataKey:"FT%",zKey:"z_FT_impact"}};

    document.addEventListener("DOMContentLoaded", async () => {
        try {
            const response = await fetch("predictions.json");
            if (!response.ok) throw new Error(`HTTP error! status: ${response.status}`);
            fullData = await response.json();
            document.getElementById("last-updated").textContent = new Date(fullData.lastUpdated).toLocaleString();
            initializeSeasonTab(); 
            initializeDailyTab();
        } catch (e) {
            console.error("Failed to initialize:", e);
            document.querySelector('main').innerHTML = `<div class="card" style="color: red;"><h2>Failed to Load Data</h2><p>Could not fetch or parse predictions.json. Please check the file and try again.</p><p>Error: ${e.message}</p></div>`;
        }
    });

    function openTab(evt, tabName) {
        document.querySelectorAll(".tab-content").forEach(tc => tc.style.display = "none");
        document.querySelectorAll(".tab-link").forEach(tl => tl.classList.remove("active"));
        document.getElementById(tabName).style.display = "block";
        evt.currentTarget.classList.add("active");
    }

    // --- SEASON TAB ---
    function initializeSeasonTab(){if(!fullData.seasonLongProjections||0===fullData.seasonLongProjections.length)return document.getElementById("loading-message").textContent="No season-long projections available.",void(document.getElementById("season-controls").style.display="none");document.getElementById("season-controls").style.display="block",setupSeasonControls(),addSeasonEventListeners(),recalculateAndRenderSeason(),document.getElementById("loading-message").style.display="none",document.getElementById("predictions-table").style.display="table"}
    function setupSeasonControls(){const e=document.getElementById("category-weights-grid");e.innerHTML=Object.entries(STAT_CONFIG).map(([t,n])=>`<div class=category-item id=cat-item-${t}><label for=cb-${t}><input type=checkbox id=cb-${t} data-key=${t} checked> ${n.name}</label></div>`).join("")}
    function addSeasonEventListeners(){document.getElementById("season-controls").addEventListener("change",recalculateAndRenderSeason),document.getElementById("search-player").addEventListener("input",recalculateAndRenderSeason),document.getElementById("predictions-thead").addEventListener("click",handleSortSeason)}
    function recalculateAndRenderSeason(){const e=getSeasonControlSettings();processedSeasonData=fullData.seasonLongProjections.map(t=>{let n=0;return e.activeCategories.forEach(e=>{const o=STAT_CONFIG[e];let a=t[o.zKey]||0;o.invert&&(a*=-1),n+=a}),{...t,custom_z_score:n}}),e.searchTerm&&(processedSeasonData=processedSeasonData.filter(t=>t.playerName.toLowerCase().includes(e.searchTerm))),sortSeasonData(),renderSeasonTable()}
    function getSeasonControlSettings(){const e=new Set;document.querySelectorAll("#category-weights-grid input[type=checkbox]:checked").forEach(t=>{e.add(t.dataset.key)});return{activeCategories:e,showCount:parseInt(document.getElementById("show-count").value,10),searchTerm:document.getElementById("search-player").value.toLowerCase().trim()}}
    function renderSeasonTable(){renderSeasonTableHeader(),renderSeasonTableBody()}
    function renderSeasonTableHeader(){const e=[{key:"rank",name:"R#"},{key:"playerName",name:"PLAYER"},{key:"pos",name:"POS"},{key:"team",name:"TEAM"},{key:"GP",name:"GP"},{key:"minutes",name:"MPG"}],t=Object.entries(STAT_CONFIG).map(([e,t])=>({key:t.dataKey||e,name:t.name.replace(" Impact","")})),n={key:"custom_z_score",name:"TOTAL"},o=[...e,...t,n];document.getElementById("predictions-thead").innerHTML=`<tr>${o.map(e=>`<th data-sort-key=${e.key}>${e.name}</th>`).join("")}</tr>`}
    function renderSeasonTableBody(){const e=document.getElementById("predictions-tbody"),t=getSeasonControlSettings(),n=processedSeasonData.slice(0,t.showCount);e.innerHTML=0===n.length?'<tr><td colspan=20>No players match your criteria.</td></tr>':n.map((e,t)=>{let n=`<td>${t+1}</td><td><b>${e.playerName}</b></td><td>${e.pos||"N/A"}</td><td>${e.team||"N/A"}</td><td>${e.GP||0}</td><td>${e.minutes?e.minutes.toFixed(1):0}</td>`;for(const[t,o]of Object.entries(STAT_CONFIG)){let a=e[o.zKey]||0;const s=a.toFixed(2),r=a>0?"+"+s:s;let l=e[o.dataKey||t];o.dataKey&&o.dataKey.endsWith("%")&&(l=(100*(l||0)).toFixed(1)+"%"),o.invert&&(a*=-1),n+=`<td class="stat-cell"><div class="color-cell-bg ${getZScoreClass(a)}"><span class="stat-value">${l?l.toFixed?l.toFixed(1):l:0}</span><span class="z-score-value">${r}</span></div></td>`}return n+=`<td><span class="stat-value">${e.custom_z_score.toFixed(2)}</span></td>`,`<tr>${n}</tr>`}).join("")}
    function handleSortSeason(e){const t=e.target.closest("th")?.dataset.sortKey;t&&(currentSort.column===t?currentSort.direction="desc"===currentSort.direction?"asc":"desc":(currentSort.column=t,currentSort.direction=["playerName","pos","team"].includes(t)?"asc":"desc"),recalculateAndRenderSeason())}
    function sortSeasonData(){const{column:e,direction:t}=currentSort,n="asc"===t?1:-1;processedSeasonData.sort((t,o)=>{let a=t[e]||"",s=o[e]||"";return"string"==typeof a?a.localeCompare(s)*n:a<s?-1*n:a>s?1*n:0})}
    function getZScoreClass(e){return null==e?"average":e>=1.75?"elite":e>=1.25?"very-good":e>=.75?"good":e<=-1.25?"not-good":e<=-.75?"below-average":"average"}
    
    // --- DAILY TAB ---
    function initializeDailyTab(){renderAccuracyChart();const e=Object.keys(fullData.dailyGamesByDate||{}).sort((e,t)=>new Date(t)-new Date(e)),t=document.getElementById("daily-date-tabs");if(0===e.length)return void(document.getElementById("daily-games-container").innerHTML='<div class="card"><p>No daily predictions available.</p></div>');t.innerHTML=e.map((t,n)=>`<button class="date-tab ${0===n?"active":""}" data-date="${t}">${new Date(t+"T00:00:00").toLocaleDateString("en-US",{weekday:"short",month:"short",day:"numeric"})}</button>`).join(""),t.addEventListener("click",(e=>{const t=e.target.closest(".date-tab");t&&(document.querySelectorAll(".date-tab").forEach((e=>e.classList.remove("active"))),t.classList.add("active"),renderDailyGamesForDate(t.dataset.date))})),document.getElementById("daily-games-container").addEventListener("click",(e=>{if(e.target.classList.contains("grade-button")){const t=e.target.dataset.gameId,n=e.target.dataset.date,o=fullData.dailyGamesByDate[n].find((e=>e.gameId==t));o&&showGradeOverlay(o)}})),renderDailyGamesForDate(e[0])}
    function renderAccuracyChart(){const e=document.getElementById("accuracy-chart-container");if(!fullData.historicalGrades||fullData.historicalGrades.length<2)return void(e.style.display="none");e.style.display="block";const t=document.getElementById("accuracy-chart").getContext("2d"),n=fullData.historicalGrades.map((e=>new Date(e.date+"T00:00:00").toLocaleDateString("en-US",{month:"short",day:"numeric"}))),o=fullData.historicalGrades.map((e=>e.overallMAEPts));accuracyChartInstance&&accuracyChartInstance.destroy(),accuracyChartInstance=new Chart(t,{type:"line",data:{labels:n,datasets:[{label:"Average Points MAE",data:o,borderColor:"rgb(0, 123, 255)",tension:.1,backgroundColor:"rgba(0, 123, 255, 0.1)",fill:!0}]},options:{scales:{y:{reverse:!0,title:{display:!0,text:"Prediction Error (Lower is Better)"}}}}})}
    function renderDailyGamesForDate(e){const t=document.getElementById("daily-games-container");t.innerHTML="";const n=fullData.dailyGamesByDate[e];n.forEach((e=>{const n=document.createElement("div");n.className="matchup-card";const[o,a]=e.projections,s=e.grade.isGraded?`<button class="grade-button" data-game-id="${e.gameId}" data-date="${e}">View Prediction Grade</button>`:"";n.innerHTML=`<div class="matchup-header"><span>${o.teamName} (${o.winProb}%)</span><span>vs</span><span>(${a.winProb}%) ${a.teamName}</span>${s}</div>`,t.appendChild(n)}))}
    function showGradeOverlay(e){const t=e.grade,n=document.getElementById("grade-overlay"),o=document.getElementById("grade-modal-content"),[a,s]=Object.keys(t.gameSummary.predicted),r=e=>`<li class="player-grade-item"><div class="player-name">${e.playerName}</div><div class="stats-comparison"><table><thead><tr><th></th><th>PTS</th><th>REB</th><th>AST</th></tr></thead><tbody><tr><td>Predicted</td><td class="predicted">${e.predicted.PTS.toFixed(1)}</td><td class="predicted">${e.predicted.REB.toFixed(1)}</td><td class="predicted">${e.predicted.AST.toFixed(1)}</td></tr><tr><td>Actual</td><td>${e.actual.PTS.toFixed(1)}</td><td>${e.actual.REB.toFixed(1)}</td><td>${e.actual.AST.toFixed(1)}</td></tr></tbody></table></div></li>`;o.innerHTML=`<div class="grade-modal"><div class="modal-header"><h2>Prediction Grade</h2><span class="grade-badge grade-${t.overallGrade.replace("+","-plus")}">${t.overallGrade}</span><button class="modal-close">×</button></div><div class="modal-section scoreboard"><div class="team-name">${a}</div><div>vs</div><div class="team-name">${s}</div><div>Predicted: <span class="score">${t.gameSummary.predicted[a]}</span></div><div></div><div>Predicted: <span class="score">${t.gameSummary.predicted[s]}</span></div><div>Actual: <span class="score">${t.gameSummary.actual[a]}</span></div><div></div><div>Actual: <span class="score">${t.gameSummary.actual[s]}</span></div></div><div class="modal-section shining-stars"><h3>⭐ Shining Stars (Most Accurate)</h3><ul class="player-grade-list">${t.shiningStars.map(r).join("")}</ul></div><div class="modal-section tough-calls"><h3>🔬 Tough Calls (Largest Misses)</h3><ul class="player-grade-list">${t.toughCalls.map(r).join("")}</ul></div><div class="modal-section"><h3>Stat Accuracy Deep Dive (Avg. Error)</h3><canvas id="stat-error-chart"></canvas></div></div>`,n.classList.remove("overlay-hidden"),n.classList.add("visible"),n.querySelector(".modal-close").addEventListener("click",(()=>{n.classList.remove("visible"),o.innerHTML=""})),n.addEventListener("click",(e=>{e.target===n&&(n.classList.remove("visible"),o.innerHTML="")})),renderStatErrorChart(t.statErrors)}
    function renderStatErrorChart(e){const t=document.getElementById("stat-error-chart").getContext("2d");statErrorChartInstance&&statErrorChartInstance.destroy(),statErrorChartInstance=new Chart(t,{type:"bar",data:{labels:Object.keys(e),datasets:[{label:"Average Error",data:Object.values(e),backgroundColor:"rgba(255, 99, 132, 0.2)",borderColor:"rgba(255, 99, 132, 1)",borderWidth:1}]},options:{indexAxis:"y",plugins:{legend:{display:!1}},scales:{x:{title:{display:!0,text:"Average Error"}}}}})}
    